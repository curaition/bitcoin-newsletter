name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Run Black
      run: |
        source .venv/bin/activate
        black --check src/ tests/
    
    - name: Run Ruff
      run: |
        source .venv/bin/activate
        ruff check src/ tests/
    
    - name: Run MyPy
      run: |
        source .venv/bin/activate
        mypy src/

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_crypto_newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Set up test environment
      run: |
        cp .env.example .env.testing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_crypto_newsletter
        REDIS_URL: redis://localhost:6379/1
        COINDESK_API_KEY: test-api-key
        TESTING: true
        DEBUG: true
        ENABLE_CELERY: false
    
    - name: Run ${{ matrix.test-type }} tests
      run: |
        source .venv/bin/activate
        python tests/test_runner.py --type ${{ matrix.test-type }} --verbose
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_crypto_newsletter
        REDIS_URL: redis://localhost:6379/1
        COINDESK_API_KEY: test-api-key
        TESTING: true
        DEBUG: true
        ENABLE_CELERY: false
    
    - name: Upload coverage to Codecov
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
        uv pip install bandit[toml] safety
    
    - name: Run Bandit security scan
      run: |
        source .venv/bin/activate
        bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Run Safety check
      run: |
        source .venv/bin/activate
        safety check --json --output safety-report.json
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  integration-full:
    name: Full Integration Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_crypto_newsletter
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
    
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -e .[dev]
    
    - name: Run database migrations
      run: |
        source .venv/bin/activate
        alembic upgrade head
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_crypto_newsletter
    
    - name: Run full test suite with coverage
      run: |
        source .venv/bin/activate
        python tests/test_runner.py --report
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_crypto_newsletter
        REDIS_URL: redis://localhost:6379/1
        COINDESK_API_KEY: ${{ secrets.COINDESK_API_KEY || 'test-api-key' }}
        TESTING: true
        DEBUG: false
        ENABLE_CELERY: true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          htmlcov/
          coverage.xml
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          pytest-report.html

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: always()
    steps:
    - name: Notify success
      if: needs.lint.result == 'success' && needs.test.result == 'success'
      run: echo "✅ All tests passed successfully!"
    
    - name: Notify failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1
