services:
  # Main FastAPI Web Service
  - type: web
    name: bitcoin-newsletter-api
    runtime: python
    region: oregon
    plan: starter
    buildCommand: |
      python -m pip install --upgrade pip
      pip install uv
      uv pip install -e .
    startCommand: "uv run crypto-newsletter serve --host 0.0.0.0 --port $PORT"
    envVars:
      - key: DATABASE_URL
        value: "postgresql+asyncpg://neondb_owner:npg_prKBLEUJ1f8P@ep-purple-firefly-ab009z0a-pooler.eu-west-2.aws.neon.tech/neondb"
      - key: REDIS_URL
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: COINDESK_API_KEY
        value: "346bed562339e612d8c119b80e25f162386d81bdbe323f381a85eab2f0cb74fb"
      - key: RAILWAY_ENVIRONMENT
        value: "production"
      - key: SERVICE_TYPE
        value: "web"
      - key: LOG_LEVEL
        value: "INFO"
      - key: DEBUG
        value: "false"
      - key: ENABLE_CELERY
        value: "true"
    healthCheckPath: "/health"

  # Celery Worker Service
  - type: worker
    name: bitcoin-newsletter-worker
    runtime: python
    region: oregon
    plan: starter
    buildCommand: |
      python -m pip install --upgrade pip
      pip install uv
      uv pip install -e .
    startCommand: "uv run crypto-newsletter worker"
    envVars:
      - key: DATABASE_URL
        value: "postgresql+asyncpg://neondb_owner:npg_prKBLEUJ1f8P@ep-purple-firefly-ab009z0a-pooler.eu-west-2.aws.neon.tech/neondb"
      - key: REDIS_URL
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: COINDESK_API_KEY
        value: "346bed562339e612d8c119b80e25f162386d81bdbe323f381a85eab2f0cb74fb"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: RAILWAY_ENVIRONMENT
        value: "production"
      - key: SERVICE_TYPE
        value: "worker"
      - key: LOG_LEVEL
        value: "INFO"
      - key: DEBUG
        value: "false"
      - key: ENABLE_CELERY
        value: "true"

  # Celery Beat Scheduler Service
  - type: worker
    name: bitcoin-newsletter-beat
    runtime: python
    region: oregon
    plan: starter
    buildCommand: |
      python -m pip install --upgrade pip
      pip install uv
      uv pip install -e .
    startCommand: "uv run crypto-newsletter beat"
    envVars:
      - key: DATABASE_URL
        value: "postgresql+asyncpg://neondb_owner:npg_prKBLEUJ1f8P@ep-purple-firefly-ab009z0a-pooler.eu-west-2.aws.neon.tech/neondb"
      - key: REDIS_URL
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: COINDESK_API_KEY
        value: "346bed562339e612d8c119b80e25f162386d81bdbe323f381a85eab2f0cb74fb"
      - key: CELERY_BROKER_URL
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: CELERY_RESULT_BACKEND
        fromService:
          type: redis
          name: bitcoin-newsletter-redis
          property: connectionString
      - key: RAILWAY_ENVIRONMENT
        value: "production"
      - key: SERVICE_TYPE
        value: "beat"
      - key: LOG_LEVEL
        value: "INFO"
      - key: DEBUG
        value: "false"
      - key: ENABLE_CELERY
        value: "true"

  # Redis service for Celery (PostgreSQL hosted externally on Neon)
  - type: redis
    name: bitcoin-newsletter-redis
    region: oregon
    plan: starter
    maxmemoryPolicy: allkeys-lru
    ipAllowList: []  # Allow access from all Render services in this account

# Frontend services will be added later after creating React applications
# - Backoffice Admin Dashboard (React)
# - Consumer Frontend (React)
